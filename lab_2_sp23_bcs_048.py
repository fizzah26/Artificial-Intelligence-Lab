# -*- coding: utf-8 -*-
"""Lab 2 SP23-BCS-048.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vk43_EdSMi6BLak-gTO51k2kqPu293Ji

#Activity 1
"""

list1=[]
list2=[]
list3=[]
print("enter 4 values for list 1")
for i in range(4):
  a=int(input())
  list1.append(a)
print("enter 4 values for list 2")
for i in range(4):
  b=int(input())
  list2.append(b)
list3=list1+ list2
print(list3)

"""#Activity 2"""

def isPallindrome(word):
  temp=word[::-1]
  if temp.capitalize()==word.capitalize():
    return True
  else:
    return False
word=input("enter a word: ")
print(isPallindrome(word))

"""#Activity 3"""

a=[[1,0,0],[0,1,0],[0,0,1]]
b=[[1,2,3],[4,5,6],[7,8,9]]
c=[]
for inrow in range(3):
  c.append ([])
  for incol in range(3):
    c[inrow].append(0)
    for inmid in range(3):
      c[inrow][incol]+=a[inrow][inmid]*b[inmid][incol]
print(c)

"""#Activity 4"""

def perimeter(listing):
  leng=len(listing)
  perimeter=0;
  for i in range(0,leng-1):
    dist=(((listing[i][0] - listing[i+1][0])**2)+((listing[i][1] - listing[i+1][1])**2))**0.5
    perimeter=perimeter +dist
  perimeter=perimeter +(((listing[0][0] - listing[leng-1][0])**2)+((listing[0][1] - listing[leng-1][1])**2))**0.5
  return perimeter
L=[(1,3),(2,7),(3,9),(-1,8)]
print(perimeter(L))

"""#Activity 5"""

def symmetric_difference(A, B):
    C = []

    for item in A:
        if item not in B:
            C.append(item)

    for item in B:
        if item not in A:
            C.append(item)

    return set(C)


A = {1, 2, 3, 4}
B = {3, 4, 5, 6}

C = symmetric_difference(A, B)
print("Custom Symmetric Difference:", C)

print("A.symmetric_difference(B):", A.symmetric_difference(B))
print("B.symmetric_difference(A):", B.symmetric_difference(A))
print("A ^ B:", A ^ B)
print("B ^ A:", B ^ A)

"""#Activity 6"""

phone_book = {
    ("John", "Doe"): "123-456-7890",
    ("Jane", "Smith"): "987-654-3210",
    ("Alice", "Johnson"): "555-123-4567"
}

first_name = input("Enter first name: ")
first_name=first_name.capitalize()
last_name = input("Enter last name: ")
last_name=last_name.capitalize()

key = (first_name, last_name)

if key in phone_book:
    print("Phone number:",{phone_book[key]})
else:
    print("Name not found in the phone book.")

"""#Task 1"""

# Get user input for both lists
list1 = list(map(int, input("Enter numbers for the first list (space-separated): ").strip().split()))
list2 = list(map(int, input("Enter numbers for the second list (space-separated): ").strip().split()))

# Merge the lists
merged_list = list1 + list2

# Sort the merged list
sorted_list = sorted(merged_list)

# Display the sorted merged list
print("Sorted merged list:", sorted_list)

"""#Task 2"""

# Get user input for both lists
list1 = list(map(int, input("Enter numbers for the first list (space-separated): ").strip().split()))
list2 = list(map(int, input("Enter numbers for the second list (space-separated): ").strip().split()))

# Merge the lists
merged_list = list1 + list2

# Sort the merged list
sorted_list = sorted(merged_list)

# Display the sorted merged list
print("Sorted merged list:", sorted_list)

# Find the smallest and largest elements
smallest = min(sorted_list)
largest = max(sorted_list)

# Display the smallest and largest elements
print("Smallest element:", smallest)
print("Largest element:", largest)

"""#Task 4"""

# Define a dictionary with names and birthdays
birthdays = {
    "Albert Einstein": "03/14/1879",
    "Benjamin Franklin": "01/17/1706",
    "Ada Lovelace": "12/10/1815"
}

# Display available names
print("Welcome to the birthday dictionary. We know the birthdays of:")
for name in birthdays:
    print(name)

# Get user input
name = input("Who's birthday do you want to look up? ")


# Search and display the birthday
if name in birthdays:
    print(name," birthday is " ,birthdays[name])
else:
    print("Sorry, we don't have that information.")

"""#Task 5"""

sample_dict = {
    "name": "Kelly",
    "age": 25,
    "salary": 8000,
    "city": "New york"
}
keys = ["name", "salary"]
new_dict = {key: sample_dict[key] for key in keys}

print(new_dict)