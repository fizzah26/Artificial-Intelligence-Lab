# -*- coding: utf-8 -*-
"""task 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ptoXmv7YFWjXDK-X-1Aw3VYCWwo6goXy
"""

# printing variables and if condition
num=32
if num> 50:
  print("number is greater than 50")
else:
    print("number is less than 50")

#data types
a,b,c = "apple" ,3, 10.55
print(a)
print(b)
print(c)
print (type(a))
print (type(b))
print (type(c))

#type casting
i=5.55
int(i)
x=5
float(x)
y=2

#arithmetic operations
print(x+y)
print(x-y)
print(x*y)
print(x<y)

#Lists, Tuples and Sets

#list
#list is ordered collected . it can be accessed using both while and for loop.
l=[10,20]
for i in l:
  print(i)
#swapping is possible in list
l[0],l[1]  = l[1],l[0]
i=0
while i<len(l):
  print (l[i])
  i=i+1

#Tuples
#tuples is ordered collected . it can be accessed using both while and for loop.
t=(30,40)
for j in t:
  print(j)
#swapping is not possible in tuple
"""
t(0),t(1)  = t(1),t(0)
j=0
while j<len(t):
  print (t(j))
  j=j+1
"""

#Sets
#sets is unordered collected . it can be accessed using for loop only because while loop requires index for traversing.
s={50,60}
for i in s:
  print(i)

#swapping is not possible in sets
"""
s{0},s{1}  = s{1},s{0}
i=0
while i<len(s):
  print (s[i])
  i=i+1
"""

#Dictionary
thisdict = {
  "a": 100,
  "b": 200,
  "c": 300
}
print(thisdict)

class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if self.is_empty():
            raise IndexError("pop from empty stack")
        return self.items.pop()

    def peek(self):
        if self.is_empty():
            raise IndexError("peek from empty stack")
        return self.items[-1]

    def size(self):
        return len(self.items)

# Example usage:
stack = Stack()
stack.push(10)
stack.push(20)
print(stack.peek())  # Output: 20
print(stack.pop())   # Output: 20
print(stack.size())  # Output: 1
print(stack.is_empty())  # Output: False